{{- if and .Values.jxRequirements.ingress.domain .Values.jxRequirements.ingress.tls.production }}
{{- if not .Values.issuer.cluster }}
{{- if .Values.issuer.enabled }}
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: "{{ .Values.jxRequirements.ingress.tls.email }}"
    preferredChain: "{{ .Values.issuer.preferredChain }}"
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - selector:
        dnsNames:
        - "*.{{ .Values.jxRequirements.ingress.domain }}"
        - "{{ .Values.jxRequirements.ingress.domain }}"       
        - "*.staging.{{ (split "." .Values.jxRequirements.ingress.domain)._1 }}.com"
        - "staging.{{ (split "." .Values.jxRequirements.ingress.domain)._1 }}.com"
      # ACME DNS-01 provider configurations
      dns01:
{{- if eq .Values.jxRequirements.cluster.provider "gke" }}
        cloudDNS:
          # The project in which to update the DNS zone
          project: "{{ .Values.jxRequirements.cluster.project }}"
{{- if .Values.secretName }}
          # A secretKeyRef to a google cloud json service account
          serviceAccountSecretRef:
            name: {{ .Values.secretName }}
            key: credentials.json
{{- end }}
{{- end }}
{{- if eq .Values.jxRequirements.cluster.provider "eks" }}
        route53:
          region: {{ .Values.jxRequirements.cluster.region }}
{{- end }}
{{- if eq .Values.jxRequirements.cluster.provider "aks" }}
        azureDNS:
          subscriptionID: {{ .Values.jxRequirements.cluster.azure.dns.subscriptionId }}
          resourceGroupName: {{ .Values.jxRequirements.cluster.azure.dns.resourceGroup }}
          hostedZoneName: {{ .Values.jxRequirements.ingress.domain }}
          managedIdentity:
            clientID: {{ .Values.jxRequirements.cluster.azure.clusterNodes.clientID }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
